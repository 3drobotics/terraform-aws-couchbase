#!/bin/bash

set -e


readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly BASH_COMMONS_DIR="$SCRIPT_DIR/../bash-commons"

source "$BASH_COMMONS_DIR/logging.sh"
source "$BASH_COMMONS_DIR/assertions.sh"
source "$BASH_COMMONS_DIR/strings.sh"
source "$BASH_COMMONS_DIR/os.sh"

readonly DEFAULT_SYNC_GATEWAY_VERSION="2.0.0-beta2"
readonly DEFAULT_SYNC_GATEWAY_MD5_CHECKSUM_UBUNTU_16_04="3c606a52305310a1e72f6308f68237b8"
readonly DEFAULT_SYNC_GATEWAY_MD5_CHECKSUM_AMAZON_LINUX="62d233a00d9b50fd6e1278324cfd673d"

readonly DEFAULT_SYNC_GATEWAY_DIR="/opt/couchbase-sync-gateway"
readonly DEFAULT_SYNC_GATEWAY_BIN_DIR="$DEFAULT_SYNC_GATEWAY_DIR/bin"
readonly BASH_COMMONS_INSTALL_DIR="$DEFAULT_SYNC_GATEWAY_DIR/bash-commons"

# The systemd unit for Sync Gateway configures it load the config file at this path
readonly DEFAULT_SYNC_GATEWAY_CONFIG_PATH="/home/sync_gateway/sync_gateway.json"

function print_usage {
  echo
  echo "Usage: install-sync-gateway [options]"
  echo
  echo "This script can be used to install Couchbase Sync Gateway and its dependencies. This script has been tested with Ubuntu 16.04 and Amazon Linux."
  echo
  echo "Options:"
  echo
  echo -e "  --version\tThe version of Sync Gateway to install. Default: $DEFAULT_SYNC_GATEWAY_VERSION."
  echo -e "  --checksum\tThe MD5 checksum of the Sync Gateway package. Required if --version is specified. You can get it from the downloads page of the Couchbase website."
  echo -e "  --config\tConfigure Sync Gateway to use the specified JSON config file."
  echo
  echo "Example:"
  echo
  echo "  install-sync-gateway --version $DEFAULT_SYNC_GATEWAY_VERSION --checksum $DEFAULT_SYNC_GATEWAY_MD5_CHECKSUM_UBUNTU_16_04 --config my-custom-config.json"
}

function install_sync_gateway_on_ubuntu {
  local readonly version="$1"
  local readonly checksum="$2"

  log_info "Installing Sync Gateway on Ubuntu"

  # TODO: what about the community edition?
  local readonly filepath="couchbase-sync-gateway-enterprise_${version}_x86_64.deb"
  local readonly url="https://packages.couchbase.com/releases/couchbase-sync-gateway/$version/$filepath"

  log_info "Downloading Sync Gateway from $url to $filepath"
  curl --location --silent --fail --show-error -O "$url"

  log_info "Verifying checksum is $checksum"
  echo "$checksum $filepath" | md5sum -c

  # Install Sync Gateway, but configure it to NOT start on boot. This allows the run-sync-gateway script to configure
  # Sync Gateway, including what ports to use, and THEN boot it up.
  log_info "Installing SyncGateway from $filepath"
  sudo dpkg -i "$filepath"
  sudo systemctl stop sync_gateway
  sudo systemctl disable sync_gateway

  log_info "Cleaning up $filepath"
  rm -f "$filepath"
}

function install_sync_gateway_on_amazon_linux {
  local readonly version="$1"
  local readonly checksum="$2"

  log_info "Installing Couchbase on Amazon Linux"

  # TODO: what about the community edition?
  local readonly filepath="couchbase-sync-gateway-enterprise_${version}_x86_64.rpm"
  local readonly url="https://packages.couchbase.com/releases/couchbase-sync-gateway/$version/$filepath"

  log_info "Downloading Sync Gateway from $url to $filepath"
  curl --location --silent --fail --show-error -O "$url"

  log_info "Verifying checksum is $checksum"
  echo "$checksum $filepath" | md5sum -c

  # Install Sync Gateway, but configure it to NOT start on boot. This allows the run-sync-gateway script to configure
  # Sync Gateway, including what ports to use, and THEN boot it up.
  log_info "Installing SyncGateway from $filepath"
  sudo rpm --install "$filepath"

  # These commands sometimes exit with an error for no obvious reason, so just ignore the error...
  set +e
  sudo service sync_gateway stop
  sudo chkconfig sync_gateway off
  set -e

  log_info "Cleaning up $filepath"
  rm -f "$filepath"
}

function install_config {
  local readonly config="$1"

  if [[ ! -z "$config" ]]; then
    log_info "Configuring Sync Gateway to use config file $config by copying it to $DEFAULT_SYNC_GATEWAY_CONFIG_PATH"
    sudo cp "$config" "$DEFAULT_SYNC_GATEWAY_CONFIG_PATH"
  fi
}

function install_run_sync_gateway_script {
  local readonly dest_dir="$1"
  local readonly src="$SCRIPT_DIR/../run-sync-gateway/run-sync-gateway"
  local readonly dest="$dest_dir/run-sync-gateway"

  log_info "Copying $src to $dest"
  sudo cp "$src" "$dest"
  sudo chmod +x "$dest"
}

function install_bash_commons {
  local readonly dest_dir="$1"
  local readonly src_dir="$BASH_COMMONS_DIR"

  log_info "Copying $src_dir to $dest_dir"
  sudo cp -r "$src_dir" "$dest_dir"
}

function install {
  local version="$DEFAULT_SYNC_GATEWAY_VERSION"
  local checksum=$(is_amazon_linux && echo -n "$DEFAULT_SYNC_GATEWAY_MD5_CHECKSUM_AMAZON_LINUX" || echo -n "$DEFAULT_SYNC_GATEWAY_MD5_CHECKSUM_UBUNTU_16_04")
  local config

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --version)
        assert_not_empty "$key" "$2"
        version="$2"
        shift
        ;;
      --checksum)
        assert_not_empty "$key" "$2"
        checksum="$2"
        shift
        ;;
      --config)
        assert_not_empty "$key" "$2"
        config="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_is_installed "curl"

  if [[ ! -z "$version" && -z "$checksum" ]]; then
    log_error "You must specify the --checksum parameter when specifying the --version parameter. You can find the checksums on the Couchbase downloads page."
    exit 1
  fi

  log_info "Starting Sync Gateway install..."

  if is_ubuntu "16.04"; then
    install_sync_gateway_on_ubuntu "$version" "$checksum"
  elif is_amazon_linux; then
    install_sync_gateway_on_amazon_linux "$version" "$checksum"
  else
    log_error "This script only supports Ubuntu 16.04 and Amazon Linux."
    exit 1
  fi

  install_config "$config"
  install_run_sync_gateway_script "$DEFAULT_SYNC_GATEWAY_BIN_DIR"
  install_bash_commons "$BASH_COMMONS_INSTALL_DIR"

  log_info "Sync Gateway installed successfully!"
}

install "$@"

